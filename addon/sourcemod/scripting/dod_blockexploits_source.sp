#include <sourcemod>
#include <sdktools>

#define PLUGIN_VERSION "1.8.1"
#define LOGFILE		"addons/sourcemod/logs/dod_blockexploits_source.log"

public Plugin:myinfo = 
{
	name = "DoD BlockExploits",
	author = "FeuerSturm + darkranger, vintage",
	description = "Detect/Block several Exploits",
	version = PLUGIN_VERSION,
	url = "http://www.dodsplugins.com"
}

#define MP44	32
#define BAR		36

new Handle:BEMapAnzioFix = INVALID_HANDLE
new Handle:BEMapAvaFix = INVALID_HANDLE
new Handle:BEMapFlashFix = INVALID_HANDLE
new Handle:BEMapDonnerFix = INVALID_HANDLE
new Handle:BEDetectFastFire = INVALID_HANDLE
new Handle:BENoDetailCheck = INVALID_HANDLE
new Handle:BEEmptyNameCheck = INVALID_HANDLE
new Handle:BEMouseSpeedCheck = INVALID_HANDLE
new Handle:BEDXLevelCheck = INVALID_HANDLE
new Handle:BEGammaCheck = INVALID_HANDLE
new Handle:BENetGraphCheck = INVALID_HANDLE
new Handle:BEAction = INVALID_HANDLE
new Handle:BEBantime = INVALID_HANDLE
new Handle:BECustomBan = INVALID_HANDLE
new Handle:BECustomBanCmd = INVALID_HANDLE
new Handle:BELogAllActions = INVALID_HANDLE
new Handle:BENoRecoilFix = INVALID_HANDLE
new Float:g_LastShot[MAXPLAYERS+1]
new g_iAmmo, g_iClip1

public OnPluginStart()
{
	BEAction = CreateConVar("dod_blockexploits_action", "1", "<1/2> = set action for caught players: 1 - kick players  /  2 - ban players", FCVAR_PLUGIN, true, 1.0, true, 2.0)
	BECustomBan = CreateConVar("dod_blockexploits_bansystem", "0", "<1/0> = enable/disable using custom ban system (like SourceBans) instead of native banning", FCVAR_PLUGIN, true, 0.0, true, 1.0)
	BECustomBanCmd = CreateConVar("dod_blockexploits_bancommand", "sm_ban", "<command> = custom ban command to use for banning", FCVAR_PLUGIN)
	BEBantime = CreateConVar("dod_blockexploits_bantime", "1440", "<#> = time in minutes to ban caught players  -  0 = permanent", FCVAR_PLUGIN, true, 0.0)
	BELogAllActions = CreateConVar("dod_blockexploits_logging", "1", "<1/0> = enable/disable logging of kicks/bans", FCVAR_PLUGIN, true, 0.0, true, 1.0)
	BENoDetailCheck = CreateConVar("dod_blockexploits_nodetailcheck", "1", "<1/0> = enable/disable detecting players that disable environmental details", FCVAR_PLUGIN, true, 0.0, true, 1.0)
	BEDetectFastFire = CreateConVar("dod_blockexploits_fastfirefix", "1", "<1/0> = enable/disable detecting players that fire faster with K98/K98S/Springfield than weapons usually allow", FCVAR_PLUGIN, true, 0.0, true, 1.0)
	BEMapAnzioFix = CreateConVar("dod_blockexploits_anziofix", "1", "<1/0> = enable/disable fixing the 'transparent wall' bug in dod_anzio", FCVAR_PLUGIN, true, 0.0, true, 1.0)
	BEMapAvaFix = CreateConVar("dod_blockexploits_avalanchefix", "1", "<1/0> = enable/disable fixing the 'spawn camping' problem in dod_avalanche", FCVAR_PLUGIN, true, 0.0, true, 1.0)
	BEMapFlashFix = CreateConVar("dod_blockexploits_flashfix", "1", "<1/0> = enable/disable fixing the 'ghost crate' bug in dod_flash", FCVAR_PLUGIN, true, 0.0, true, 1.0)
	BEMapDonnerFix= CreateConVar("dod_blockexploits_donnerfix", "1", "<1/0> = enable/disable fixing the 'archway bug' near the tank in dod_donner", FCVAR_PLUGIN, true, 0.0, true, 1.0)
	BEEmptyNameCheck = CreateConVar("dod_blockexploits_emptynamecheck", "1", "<1/0> = enable/disable checking player names for only consisting of whitespace chars", FCVAR_PLUGIN, true, 0.0, true, 1.0)
	BEMouseSpeedCheck = CreateConVar("dod_blockexploits_mousespeedcheck", "1", "<1/0> = enable/disable checking player's mouse sensitivity", FCVAR_PLUGIN, true, 0.0, true, 1.0)
	BEDXLevelCheck = CreateConVar("dod_blockexploits_dxlevelcheck", "1", "<1/0> = enable/disable checking player's set DirectX level", FCVAR_PLUGIN, true, 0.0, true, 1.0)
	BEGammaCheck = CreateConVar("dod_blockexploits_gammacheck", "0", "<#.#> = set minimum allowed value for set Gamma - 0 = disable check!", FCVAR_PLUGIN, true, 0.0, true, 2.2)
	BENoRecoilFix = CreateConVar("dod_blockexploits_norecoilfix", "1", "<1/0> = enable/disable blocking No-Recoil-Exploit", FCVAR_PLUGIN, true, 0.0, true, 1.0)
	BENetGraphCheck = CreateConVar("dod_blockexploits_netgraphcheck", "1", "<1/0> = enable/disable blocking netgraph >1", FCVAR_PLUGIN, true, 0.0, true, 1.0)
	RegAdminCmd("drop", cmd_drop, 0)
	HookEventEx("player_changename", OnClientChangeName, EventHookMode_Post)
	HookEventEx("dod_stats_weapon_attack", OnWeaponAttack, EventHookMode_Post)
	HookEventEx("dod_round_active", OnRound, EventHookMode_Post)
	HookEventEx("dod_round_start", OnRound, EventHookMode_Post)
	HookEvent("player_death", OnPlayerDeath, EventHookMode_Pre)
	HookEventEx("player_spawn", OnPlayerSpawn, EventHookMode_Post)
	AutoExecConfig(true,"dod_blockexploits_source", "dod_blockexploits_source")
}

public OnMapStart()
{
	PrecacheModel("models/props_foliage/rock_coast02h.mdl")
	PrecacheModel("models/props_crates/static_crate_40.mdl")
	PrecacheModel("models/props_debris/walldestroyed03a.mdl")
	PrecacheModel("models/props_doors/doorframe_07a.mdl")
	PrecacheModel("models/props_debris/walldestroyed05a.mdl")
	PrecacheModel("models/props_debris/walldestroyed08a.mdl")
	g_iAmmo = FindSendPropOffs("CDODPlayer", "m_iAmmo")
	g_iClip1 = FindSendPropInfo("CBaseCombatWeapon", "m_iClip1")
}

public OnClientDisconnect(client)
{
	g_LastShot[client] = -1.0
}

public Action:cmd_drop(client, args)
{
	if(IsClientInGame(client) && IsPlayerAlive(client) && GetConVarInt(BENoRecoilFix) == 1)
	{
		decl String:Weapon[32]
		GetClientWeapon(client, Weapon, sizeof(Weapon))
		if(StrEqual(Weapon, "weapon_bar") || StrEqual(Weapon, "weapon_mp44"))
		{
			new AmmoOffs, BackPackAmmo, ClipAmmo
			new wpn = GetPlayerWeaponSlot(client, 0)
			if(wpn != -1)
			{
				if(StrEqual(Weapon, "weapon_mp44"))
				{
					AmmoOffs = MP44
				}
				else
				{
					AmmoOffs = BAR
				}
				BackPackAmmo = GetEntData(client, g_iAmmo + AmmoOffs)
				ClipAmmo = GetEntData(wpn, g_iClip1)
			}
			new Handle:NoRecoilPack = CreateDataPack()
			WritePackCell(NoRecoilPack, client)
			WritePackString(NoRecoilPack, Weapon)
			WritePackCell(NoRecoilPack, BackPackAmmo)
			WritePackCell(NoRecoilPack, ClipAmmo)
			WritePackCell(NoRecoilPack, AmmoOffs)
			ResetPack(NoRecoilPack, false)
			CreateTimer(0.1, CheckWeapon, NoRecoilPack, TIMER_FLAG_NO_MAPCHANGE)
		}
	}
	return Plugin_Continue
}

public Action:CheckWeapon(Handle:timer, Handle:NoRecoilPack)
{
	new client = ReadPackCell(NoRecoilPack)
	if(IsClientInGame(client) && IsPlayerAlive(client))
	{
		decl String:OldWeapon[32], String:NewWeapon[32]
		ReadPackString(NoRecoilPack, OldWeapon, sizeof(OldWeapon))
		GetClientWeapon(client, NewWeapon, sizeof(NewWeapon))
		if(StrEqual(OldWeapon, NewWeapon))
		{
			new BackPackAmmo = ReadPackCell(NoRecoilPack)
			new ClipAmmo = ReadPackCell(NoRecoilPack)
			new AmmoOffs = ReadPackCell(NoRecoilPack)
			new wpn = GetPlayerWeaponSlot(client, 0)
			if(wpn != -1)
			{
				RemovePlayerItem(client, wpn)
				RemoveEdict(wpn)
				new newweap = GivePlayerItem(client, NewWeapon)
				if(newweap != -1)
				{
					SetEntData(newweap, g_iClip1, ClipAmmo)
					SetEntData(client, g_iAmmo + AmmoOffs, BackPackAmmo)
				}
			}
		}
	}
	ResetPack(NoRecoilPack, true)
	CloseHandle(NoRecoilPack)
	return Plugin_Handled
}
	
public OnClientPostAdminCheck(client)
{
	g_LastShot[client] = -1.0
	if(IsClientInGame(client) && !IsFakeClient(client))
	{
		CreateTimer(10.0, Timer_CheckConVars, client, TIMER_REPEAT|TIMER_FLAG_NO_MAPCHANGE)
	}
	if(GetConVarInt(BEEmptyNameCheck) == 1)
	{
		decl String:clientname[32]
		GetClientName(client, clientname, sizeof(clientname))
		new NameLength = strlen(clientname)
		if(TrimString(clientname) < NameLength || NameLength == 0)
		{
			if(strcmp(clientname, "") != 0)
			{
				SetClientInfo(client, "name", clientname)
			}
			else
			{
				DoActionEmptyNameCheck(client)
			}
		}
	}
}

public Action:OnClientChangeName(Handle:event, const String:name[], bool:dontBroadcast)
{
	if(GetConVarInt(BEEmptyNameCheck) == 0)
	{
		return Plugin_Continue
	}
	new client = GetClientOfUserId(GetEventInt(event, "userid"))
	decl String:clientoldname[32], String:clientnewname[32]
	GetEventString(event, "oldname", clientoldname, sizeof(clientoldname))
	GetEventString(event, "newname", clientnewname, sizeof(clientnewname))
	new NameLength = strlen(clientnewname)
	if(TrimString(clientnewname) < NameLength || NameLength == 0)
	{
		if(strcmp(clientnewname, "") != 0)
		{
			SetClientInfo(client, "name", clientnewname)
		}
		else
		{
			DoActionEmptyNameCheck(client)
		}
		dontBroadcast = true
		return Plugin_Changed
	}
	return Plugin_Continue
}

DoActionEmptyNameCheck(client)
{
	if(IsClientInGame(client) && !IsClientInKickQueue(client))
	{
		decl String:message[256]
		Format(message, sizeof(message), "UsingAnEmptyName")
		new action = GetConVarInt(BEAction)
		if(GetConVarInt(BELogAllActions) == 1)
		{
			decl String:SteamId[32]
			GetClientAuthString(client, SteamId, sizeof(SteamId))
			decl String:IP[32]
			GetClientIP(client, IP, sizeof(IP), true)
			LogToFile(LOGFILE, "Player '%N' (%s / %s) has been %s for using an empty name!", client, SteamId, IP, action == 1 ? "kicked" : "banned")
		}
		if(action == 1)
		{
			KickClient(client, message)
		}
		else
		{
			new bantime = GetConVarInt(BEBantime)
			if(GetConVarInt(BECustomBan) == 0)
			{
				BanClient(client, bantime, BANFLAG_AUTHID|BANFLAG_AUTO, message, message, "DoDBlockExploits", 0)
			}
			else
			{
				new userid = GetClientUserId(client)
				decl String:BanCmd[64]
				GetConVarString(BECustomBanCmd, BanCmd, sizeof(BanCmd))
				ServerCommand("%s #%d %i %s", BanCmd, userid, bantime, message)
			}
		}	
	}
}

public Action:Timer_CheckConVars(Handle:timer, any:client)
{
	if(!IsClientInGame(client) || IsFakeClient(client))
	{
		return Plugin_Stop
	}
	CheckConVars(client)
	return Plugin_Handled
}

CheckConVars(client)
{
	if(IsClientInGame(client))
	{
		QueryClientConVar(client, "r_drawdetailprops", ConVarQueryFinished:detailconvars)
	}
}

public detailconvars(QueryCookie:cookie, client, ConVarQueryResult:result, const String:cvarName1[], const String:cvarValue1[])
{
	if(!IsClientInGame(client) || IsClientInKickQueue(client))
	{
		return
	}
	new value = StringToInt(cvarValue1)
	if(StrEqual(cvarName1, "r_drawdetailprops"))
	{
		if(value != 1 && GetConVarInt(BENoDetailCheck) == 1)
		{
			PrintToConsole(client, "[DoD BlockExploits] ConVar '%s' has to be '1' to play here!", cvarName1)
			new Handle:InfoPack = CreateDataPack()
			WritePackCell(InfoPack, client)
			WritePackString(InfoPack, cvarName1)
			WritePackCell(InfoPack, value)
			CreateTimer(0.1, DoActionDetailCheck, InfoPack, TIMER_FLAG_NO_MAPCHANGE)
			return
		}
		else
		{
			QueryClientConVar(client, "cl_detaildist", ConVarQueryFinished:detailconvars)
			return
		}
	}
	else if(StrEqual(cvarName1, "cl_detaildist"))
	{
		if(value < 1200 && GetConVarInt(BENoDetailCheck) == 1)
		{
			PrintToConsole(client, "[DoD BlockExploits] ConVar '%s' has to be at least '1200' to play here!", cvarName1)
			new Handle:InfoPack = CreateDataPack()
			WritePackCell(InfoPack, client)
			WritePackString(InfoPack, cvarName1)
			WritePackCell(InfoPack, value)
			CreateTimer(0.1, DoActionDetailCheck, InfoPack, TIMER_FLAG_NO_MAPCHANGE)
			return
		}
		else
		{
			QueryClientConVar(client, "sensitivity", ConVarQueryFinished:detailconvars)
			return
		}
	}
	else if(StrEqual(cvarName1, "sensitivity"))
	{
		if(value > 20 && GetConVarInt(BEMouseSpeedCheck) == 1)
		{
			PrintToConsole(client, "[DoD BlockExploits] ConVar '%s' has to be less than '20' to play here!", cvarName1)
			new Handle:InfoPack = CreateDataPack()
			WritePackCell(InfoPack, client)
			WritePackString(InfoPack, cvarName1)
			WritePackCell(InfoPack, value)
			CreateTimer(0.1, DoActionSensitivityCheck, InfoPack, TIMER_FLAG_NO_MAPCHANGE)
			return
		}
		else
		{
			QueryClientConVar(client, "mat_dxlevel", ConVarQueryFinished:detailconvars)
			return
		}
	}
	else if(StrEqual(cvarName1, "mat_dxlevel"))
	{
		if(value < 80 && GetConVarInt(BEDXLevelCheck) == 1)
		{
			PrintToConsole(client, "[DoD BlockExploits] ConVar '%s' has to be at least '80' to play here!", cvarName1)
			new Handle:InfoPack = CreateDataPack()
			WritePackCell(InfoPack, client)
			WritePackString(InfoPack, cvarName1)
			WritePackCell(InfoPack, value)
			CreateTimer(0.1, DoActionDxLevelCheck, InfoPack, TIMER_FLAG_NO_MAPCHANGE)
			return
		}
		else
		{
			QueryClientConVar(client, "net_graph", ConVarQueryFinished:detailconvars)
			return
		}
	}
	else if(StrEqual(cvarName1, "net_graph"))
	{
		if(value > 1 && GetConVarInt(BENetGraphCheck) == 1)
		{
			PrintToConsole(client, "[DoD BlockExploits] ConVar '%s' has to be at max '1' to play here!", cvarName1)
			new Handle:InfoPack = CreateDataPack()
			WritePackCell(InfoPack, client)
			WritePackString(InfoPack, cvarName1)
			WritePackCell(InfoPack, value)
			CreateTimer(0.1, DoActionNetGraphCheck, InfoPack, TIMER_FLAG_NO_MAPCHANGE)
			return
		}
		else
		{
			QueryClientConVar(client, "mat_monitorgamma", ConVarQueryFinished:detailconvars)
			return
		}
	}
	else if(StrEqual(cvarName1, "mat_monitorgamma"))
	{
		new Float:gammavalue = StringToFloat(cvarValue1)
		if(gammavalue < GetConVarFloat(BEGammaCheck) && gammavalue != 0.0)
		{
			PrintToConsole(client, "[DoD BlockExploits] ConVar '%s' has to be at least '%f' to play here!", cvarName1, GetConVarFloat(BEGammaCheck))
			new Handle:InfoPack = CreateDataPack()
			WritePackCell(InfoPack, client)
			WritePackString(InfoPack, cvarName1)
			WritePackFloat(InfoPack, gammavalue)
			CreateTimer(0.1, DoActionGammaCheck, InfoPack, TIMER_FLAG_NO_MAPCHANGE)
			return
		}
		else
		{
			return
		}
	}
	return
}

public Action:DoActionDetailCheck(Handle:timer, Handle:InfoPack)
{
	ResetPack(InfoPack, false)
	new client = ReadPackCell(InfoPack)
	decl String:cvarName1[64]
	ReadPackString(InfoPack, cvarName1, sizeof(cvarName1))
	new value = ReadPackCell(InfoPack)
	ResetPack(InfoPack, true)
	CloseHandle(InfoPack)
	if(IsClientInGame(client) && !IsClientInKickQueue(client))
	{
		decl String:message[256]
		Format(message, sizeof(message), "DisablingEnvironmentalDetails")
		new action = GetConVarInt(BEAction)
		if(GetConVarInt(BELogAllActions) == 1)
		{
			decl String:SteamId[32]
			GetClientAuthString(client, SteamId, sizeof(SteamId))
			decl String:IP[32]
			GetClientIP(client, IP, sizeof(IP), true)
			LogToFile(LOGFILE, "Player '%N' (%s / %s) has been %s for disabling Environmental Details (%s %i)", client, SteamId, IP, action == 1 ? "kicked" : "banned", cvarName1, value)
		}
		if(action == 1)
		{
			KickClient(client, message)
		}
		else
		{
			new bantime = GetConVarInt(BEBantime)
			if(GetConVarInt(BECustomBan) == 0)
			{
				BanClient(client, bantime, BANFLAG_AUTHID|BANFLAG_AUTO, message, message, "DoDBlockExploits", 0)
			}
			else
			{
				new userid = GetClientUserId(client)
				decl String:BanCmd[64]
				GetConVarString(BECustomBanCmd, BanCmd, sizeof(BanCmd))
				ServerCommand("%s #%d %i %s", BanCmd, userid, bantime, message)
			}
		}	
	}
}

public Action:DoActionGammaCheck(Handle:timer, Handle:InfoPack)
{
	ResetPack(InfoPack, false)
	new client = ReadPackCell(InfoPack)
	decl String:cvarName1[64]
	ReadPackString(InfoPack, cvarName1, sizeof(cvarName1))
	new Float:gammavalue = ReadPackFloat(InfoPack)
	ResetPack(InfoPack, true)
	CloseHandle(InfoPack)
	if(IsClientInGame(client) && !IsClientInKickQueue(client))
	{
		decl String:message[256]
		Format(message, sizeof(message), "UsingLowGammaSettings")
		new action = GetConVarInt(BEAction)
		if(GetConVarInt(BELogAllActions) == 1)
		{
			decl String:SteamId[32]
			GetClientAuthString(client, SteamId, sizeof(SteamId))
			decl String:IP[32]
			GetClientIP(client, IP, sizeof(IP), true)
			LogToFile(LOGFILE, "Player '%N' (%s / %s) has been %s for using low gamma settings (%s %f)", client, SteamId, IP, action == 1 ? "kicked" : "banned", cvarName1, gammavalue)
		}
		if(action == 1)
		{
			KickClient(client, message)
		}
		else
		{
			new bantime = GetConVarInt(BEBantime)
			if(GetConVarInt(BECustomBan) == 0)
			{
				BanClient(client, bantime, BANFLAG_AUTHID|BANFLAG_AUTO, message, message, "DoDBlockExploits", 0)
			}
			else
			{
				new userid = GetClientUserId(client)
				decl String:BanCmd[64]
				GetConVarString(BECustomBanCmd, BanCmd, sizeof(BanCmd))
				ServerCommand("%s #%d %i %s", BanCmd, userid, bantime, message)
			}
		}	
	}
}

public Action:DoActionSensitivityCheck(Handle:timer, Handle:InfoPack)
{
	ResetPack(InfoPack, false)
	new client = ReadPackCell(InfoPack)
	decl String:cvarName1[64]
	ReadPackString(InfoPack, cvarName1, sizeof(cvarName1))
	new value = ReadPackCell(InfoPack)
	ResetPack(InfoPack, true)
	CloseHandle(InfoPack)
	if(IsClientInGame(client) && !IsClientInKickQueue(client))
	{
		decl String:message[256]
		Format(message, sizeof(message), "MouseSensitivityExploit")
		new action = GetConVarInt(BEAction)
		if(GetConVarInt(BELogAllActions) == 1)
		{
			decl String:SteamId[32]
			GetClientAuthString(client, SteamId, sizeof(SteamId))
			decl String:IP[32]
			GetClientIP(client, IP, sizeof(IP), true)
			LogToFile(LOGFILE, "Player '%N' (%s / %s) has been %s for Mouse Sensitivity Exploiting (%s %i)", client, SteamId, IP, action == 1 ? "kicked" : "banned", cvarName1, value)
		}
		if(action == 1)
		{
			KickClient(client, message)
		}
		else
		{
			new bantime = GetConVarInt(BEBantime)
			if(GetConVarInt(BECustomBan) == 0)
			{
				BanClient(client, bantime, BANFLAG_AUTHID|BANFLAG_AUTO, message, message, "DoDBlockExploits", 0)
			}
			else
			{
				new userid = GetClientUserId(client)
				decl String:BanCmd[64]
				GetConVarString(BECustomBanCmd, BanCmd, sizeof(BanCmd))
				ServerCommand("%s #%d %i %s", BanCmd, userid, bantime, message)
			}
		}	
	}
}

public Action:DoActionDxLevelCheck(Handle:timer, Handle:InfoPack)
{
	ResetPack(InfoPack, false)
	new client = ReadPackCell(InfoPack)
	decl String:cvarName1[64]
	ReadPackString(InfoPack, cvarName1, sizeof(cvarName1))
	new value = ReadPackCell(InfoPack)
	ResetPack(InfoPack, true)
	CloseHandle(InfoPack)
	if(IsClientInGame(client) && !IsClientInKickQueue(client))
	{
		decl String:message[256]
		Format(message, sizeof(message), "DirectXLevelExploit")
		new action = GetConVarInt(BEAction)
		if(GetConVarInt(BELogAllActions) == 1)
		{
			decl String:SteamId[32]
			GetClientAuthString(client, SteamId, sizeof(SteamId))
			decl String:IP[32]
			GetClientIP(client, IP, sizeof(IP), true)
			LogToFile(LOGFILE, "Player '%N' (%s / %s) has been %s for DirectX Level Exploiting (%s %i)", client, SteamId, IP, action == 1 ? "kicked" : "banned", cvarName1, value)
		}
		if(action == 1)
		{
			KickClient(client, message)
		}
		else
		{
			new bantime = GetConVarInt(BEBantime)
			if(GetConVarInt(BECustomBan) == 0)
			{
				BanClient(client, bantime, BANFLAG_AUTHID|BANFLAG_AUTO, message, message, "DoDBlockExploits", 0)
			}
			else
			{
				new userid = GetClientUserId(client)
				decl String:BanCmd[64]
				GetConVarString(BECustomBanCmd, BanCmd, sizeof(BanCmd))
				ServerCommand("%s #%d %i %s", BanCmd, userid, bantime, message)
			}
		}	
	}
}

public Action:DoActionNetGraphCheck(Handle:timer, Handle:InfoPack)
{
	ResetPack(InfoPack, false)
	new client = ReadPackCell(InfoPack)
	decl String:cvarName1[64]
	ReadPackString(InfoPack, cvarName1, sizeof(cvarName1))
	new value = ReadPackCell(InfoPack)
	ResetPack(InfoPack, true)
	CloseHandle(InfoPack)
	if(IsClientInGame(client) && !IsClientInKickQueue(client))
	{
		decl String:message[256]
		Format(message, sizeof(message), "NetGraphExploit")
		new action = GetConVarInt(BEAction)
		if(GetConVarInt(BELogAllActions) == 1)
		{
			decl String:SteamId[32]
			GetClientAuthString(client, SteamId, sizeof(SteamId))
			decl String:IP[32]
			GetClientIP(client, IP, sizeof(IP), true)
			LogToFile(LOGFILE, "Player '%N' (%s / %s) has been %s for Net_Graph Exploiting (%s %i)", client, SteamId, IP, action == 1 ? "kicked" : "banned", cvarName1, value)
		}
		if(action == 1)
		{
			KickClient(client, message)
		}
		else
		{
			new bantime = GetConVarInt(BEBantime)
			if(GetConVarInt(BECustomBan) == 0)
			{
				BanClient(client, bantime, BANFLAG_AUTHID|BANFLAG_AUTO, message, message, "DoDBlockExploits", 0)
			}
			else
			{
				new userid = GetClientUserId(client)
				decl String:BanCmd[64]
				GetConVarString(BECustomBanCmd, BanCmd, sizeof(BanCmd))
				ServerCommand("%s #%d %i %s", BanCmd, userid, bantime, message)
			}
		}	
	}
}

public Action:OnRound(Handle:event, const String:name[], bool:dontBroadcast)
{
	new String:mapname[256]
	GetCurrentMap(mapname, sizeof(mapname))
	if(StrContains(mapname, "dod_flash", false) != -1 && GetConVarInt(BEMapFlashFix) == 1)
	{
		new entid = -1
		while((entid = FindEntityByClassname(entid, "prop_physics_multiplayer")) != -1)
		{
			new Float:Origin[3]
			GetEntPropVector(entid, Prop_Send, "m_vecOrigin", Origin)
			new iOrigin[3]
			iOrigin[0] = RoundFloat(Origin[0])
			iOrigin[1] = RoundFloat(Origin[1])
			iOrigin[2] = RoundFloat(Origin[2])
			if(iOrigin[0] == 236 && iOrigin[1] == -1542 && iOrigin[2] == 92)
			{
				RemoveCrate(entid)
				return Plugin_Continue
			}
		}
	}
	if(StrEqual(mapname, "dod_anzio", false) && GetConVarInt(BEMapAnzioFix) == 1)
	{
		CreateTimer(0.1, SpawnRock)
		return Plugin_Continue
	}
	if(StrEqual(mapname, "dod_avalanche", false) && GetConVarInt(BEMapAvaFix) == 1)
	{
		CreateTimer(0.1, SpawnTeamWall)
		return Plugin_Continue
	}
	if((StrContains(mapname, "dod_donner", false) != -1 || StrEqual(mapname, "dod_winter", false)) && GetConVarInt(BEMapDonnerFix) == 1)
	{
		CreateTimer(0.1, SpawnDonnerTeamWall)
		return Plugin_Continue
	}
	return Plugin_Continue
}

RemoveCrate(entid)
{
	RemoveEdict(entid)
	new Crate = CreateEntityByName("prop_physics_override")
	SetEntityModel(Crate, "models/props_crates/static_crate_40.mdl")
	new Float:Origin[3]
	Origin[0] = 235.582992
	Origin[1] = -1542.420043
	Origin[2] = 92.415199
	DispatchKeyValueVector(Crate, "origin", Origin)
	DispatchKeyValue(Crate, "angles", "-0.002285 74.865623 0.068640")
	DispatchKeyValue(Crate, "spawnflags", "1544")
	DispatchSpawn(Crate)
}

public SpawnHouseWall(Float:Origin[3], String:Angles[])
{
	new Wall = CreateEntityByName("prop_physics_override")
	SetEntityModel(Wall, "models/props_debris/walldestroyed03a.mdl")
	DispatchKeyValueVector(Wall, "origin", Origin)
	DispatchKeyValue(Wall, "angles", Angles)
	DispatchKeyValue(Wall, "disableshadows", "1")
	DispatchKeyValue(Wall, "spawnflags", "1544")
	DispatchSpawn(Wall)
}

public SpawnHouseDoor()
{
	new Door = CreateEntityByName("prop_physics_override")
	SetEntityModel(Door, "models/props_doors/doorframe_07a.mdl")
	new Float:Origin[3]
	Origin[0] = 589.0
	Origin[1] = -436.0
	Origin[2] = -123.0
	DispatchKeyValueVector(Door, "origin", Origin)
	DispatchKeyValue(Door, "angles", "0.0 180.0 0.0")
	DispatchKeyValue(Door, "disableshadows", "1")
	DispatchKeyValue(Door, "spawnflags", "1544")
	DispatchSpawn(Door)
}

public Action:SpawnRock(Handle:timer)
{
	new Rock = CreateEntityByName("prop_physics_override")
	SetEntityModel(Rock, "models/props_foliage/rock_coast02h.mdl")
	new Float:Origin[3]
	Origin[0] = 639.0
	Origin[1] = -173.0
	Origin[2] = -450.0
	DispatchKeyValueVector(Rock, "origin", Origin)
	DispatchKeyValue(Rock, "angles", "0.0 295.883 0.0")
	DispatchKeyValue(Rock, "spawnflags", "1544")
	DispatchSpawn(Rock)
}

public Action:SpawnTeamWall(Handle:timer)
{
	new Float:Origin[3]
	Origin[0] = 1180.0
	Origin[1] = -725.0
	Origin[2] = -10.0
	CreateTeamWall(Origin)
	Origin[2] = 10.0
	CreateTeamWall(Origin)
	Origin[2] = 28.0
	CreateTeamWall(Origin)
	Origin[2] = 45.0
	CreateTeamWall(Origin)
	Origin[0] = -605.0
	Origin[1] = 340.0
	Origin[2] = 271.0
	new Wall = CreateEntityByName("prop_physics_override")
	SetEntityModel(Wall, "models/props_debris/walldestroyed08a.mdl")
	DispatchKeyValueVector(Wall, "origin", Origin)
	DispatchKeyValue(Wall, "angles", "0.0 185.0 0.0")
	DispatchKeyValue(Wall, "disableshadows", "1")
	DispatchKeyValue(Wall, "spawnflags", "1544")
	DispatchSpawn(Wall)
	return Plugin_Handled
}

public Action:SpawnDonnerTeamWall(Handle:timer)
{
	new Float:Origin[3]
	new String:Angles[256]
	Origin[0] = -864.0
	Origin[1] = 410.4
	Origin[2] = 2.8
	CreateDonnerTeamWall(Origin)
	Origin[0] = -418.9
	Origin[1] = -267.8
	Origin[2] = 12.3
	CreateDonnerTeamWall(Origin)
	Origin[0] = -431.8
	Origin[1] = -267.8
	Origin[2] = 36.3
	CreateDonnerTeamWall(Origin)
	Origin[0] = -453.9
	Origin[1] = -267.8
	Origin[2] = 36.0
	CreateDonnerTeamWall(Origin)
	Origin[0] = -865.0
	Origin[1] = -1434.0
	Origin[2] = -44.0
	Format(Angles, sizeof(Angles),"0.0 360.0 0.0")
	SpawnHouseWall(Origin, Angles)
	Origin[0] = -862.0
	Origin[1] = -1418.0
	Origin[2] = 33.0
	Format(Angles, sizeof(Angles),"0.0 360.0 0.0")
	SpawnHouseWall(Origin, Angles)
	Origin[0] = -996.0
	Origin[1] = -1531.0
	Origin[2] = -50.0
	Format(Angles, sizeof(Angles),"0.0 90.0 0.0")
	SpawnHouseWall(Origin, Angles)
	Origin[0] = -1002.0
	Origin[1] = -1548.0
	Origin[2] = 30.0
	Format(Angles, sizeof(Angles),"0.0 270.0 0.0")
	SpawnHouseWall(Origin, Angles)
	new String:mapname[256]
	GetCurrentMap(mapname, sizeof(mapname))
	if(!StrEqual(mapname, "dod_donner_extended"))
	{
		SpawnHouseDoor()
	}
	Origin[0] = -990.0
	Origin[1] = -1980.0
	Origin[2] = 7.0
	Format(Angles, sizeof(Angles),"90.0 270.0 0.0")
	SpawnHedges(Origin, Angles)
	Origin[1] = -2000.0
	Format(Angles, sizeof(Angles),"90.0 90.0 0.0")
	SpawnHedges(Origin, Angles)
	return Plugin_Handled
}

public SpawnHedges(Float:Origin[3], String:Angles[])
{
	new Hedge = CreateEntityByName("prop_physics_override")
	SetEntityModel(Hedge, "models/props_debris/walldestroyed05a.mdl")
	DispatchKeyValueVector(Hedge, "origin", Origin)
	DispatchKeyValue(Hedge, "angles", Angles)
	DispatchKeyValue(Hedge, "disableshadows", "1")
	DispatchKeyValue(Hedge, "spawnflags", "1544")
	DispatchKeyValue(Hedge, "solid", "2")
	DispatchKeyValue(Hedge, "fademindist", "0")
	DispatchKeyValue(Hedge, "fademaxdist", "0.1")
	DispatchSpawn(Hedge)
}

CreateDonnerTeamWall(Float:Origin[3])
{
	new teamwall
	teamwall = CreateEntityByName("func_team_wall")
	DispatchKeyValueVector(teamwall, "origin", Origin)
	DispatchKeyValue(teamwall, "blockteam", "2")
	DispatchSpawn(teamwall)
	teamwall = CreateEntityByName("func_team_wall")
	DispatchKeyValueVector(teamwall, "origin", Origin)
	DispatchKeyValue(teamwall, "blockteam", "3")
	DispatchSpawn(teamwall)
}

CreateTeamWall(Float:Origin[3])
{
	new teamwall = CreateEntityByName("func_team_wall")
	DispatchKeyValueVector(teamwall, "origin", Origin)
	DispatchKeyValue(teamwall, "blockteam", "3")
	DispatchSpawn(teamwall)
}

public Action:OnWeaponAttack(Handle:event, const String:name[], bool:dontBroadcast)
{
	if(GetConVarInt(BEDetectFastFire) == 0)
	{
		return Plugin_Continue
	}
	new client = GetClientOfUserId(GetEventInt(event, "attacker"))
	if(IsClientInGame(client) && IsPlayerAlive(client) && GetClientTeam(client) > 1)
	{
		new weapon = GetEventInt(event, "weapon")
		if(weapon == 8 || weapon == 10 || weapon == 32 || weapon == 34)
		{
			if(GetGameTime() < g_LastShot[client] + 1.6 && g_LastShot[client] != -1.0)
			{
				new weaponent = GetPlayerWeaponSlot(client, 0)
				if(weaponent != -1)
				{
					RemovePlayerItem(client, weaponent)
					RemoveEdict(weaponent)
					return Plugin_Continue
				}
			}
			else
			{
				g_LastShot[client] = GetGameTime()
				return Plugin_Continue
			}
		}
		if(weapon == 9 || weapon == 33)
		{
			if(GetGameTime() < g_LastShot[client] + 1.85 && g_LastShot[client] != -1.0)
			{
				new weaponent = GetPlayerWeaponSlot(client, 0)
				if(weaponent != -1)
				{
					RemovePlayerItem(client, weaponent)
					RemoveEdict(weaponent)
					return Plugin_Continue
				}
			}
			else
			{
				g_LastShot[client] = GetGameTime()
				return Plugin_Continue
			}
		}
		return Plugin_Continue
	}
	return Plugin_Continue
}

public Action:OnPlayerDeath(Handle:event, const String:name[], bool:dontBroadcast)
{
	new client = GetClientOfUserId(GetEventInt(event, "userid"))
	g_LastShot[client] = -1.0
	return Plugin_Continue
}

public Action:OnPlayerSpawn(Handle:event, const String:name[], bool:dontBroadcast)
{
	new client = GetClientOfUserId(GetEventInt(event, "userid"))
	g_LastShot[client] = -1.0
	return Plugin_Continue
}